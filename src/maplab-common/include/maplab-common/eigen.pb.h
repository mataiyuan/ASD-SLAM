// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maplab-common/eigen.proto

#ifndef PROTOBUF_INCLUDED_maplab_2dcommon_2feigen_2eproto
#define PROTOBUF_INCLUDED_maplab_2dcommon_2feigen_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_maplab_2dcommon_2feigen_2eproto 

namespace protobuf_maplab_2dcommon_2feigen_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_maplab_2dcommon_2feigen_2eproto
namespace common {
namespace proto {
class MatrixXd;
class MatrixXdDefaultTypeInternal;
extern MatrixXdDefaultTypeInternal _MatrixXd_default_instance_;
class MatrixXf;
class MatrixXfDefaultTypeInternal;
extern MatrixXfDefaultTypeInternal _MatrixXf_default_instance_;
class SemiStaticMatrixd;
class SemiStaticMatrixdDefaultTypeInternal;
extern SemiStaticMatrixdDefaultTypeInternal _SemiStaticMatrixd_default_instance_;
class SemiStaticMatrixf;
class SemiStaticMatrixfDefaultTypeInternal;
extern SemiStaticMatrixfDefaultTypeInternal _SemiStaticMatrixf_default_instance_;
}  // namespace proto
}  // namespace common
namespace google {
namespace protobuf {
template<> ::common::proto::MatrixXd* Arena::CreateMaybeMessage<::common::proto::MatrixXd>(Arena*);
template<> ::common::proto::MatrixXf* Arena::CreateMaybeMessage<::common::proto::MatrixXf>(Arena*);
template<> ::common::proto::SemiStaticMatrixd* Arena::CreateMaybeMessage<::common::proto::SemiStaticMatrixd>(Arena*);
template<> ::common::proto::SemiStaticMatrixf* Arena::CreateMaybeMessage<::common::proto::SemiStaticMatrixf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace common {
namespace proto {

// ===================================================================

class MatrixXf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.proto.MatrixXf) */ {
 public:
  MatrixXf();
  virtual ~MatrixXf();

  MatrixXf(const MatrixXf& from);

  inline MatrixXf& operator=(const MatrixXf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixXf(MatrixXf&& from) noexcept
    : MatrixXf() {
    *this = ::std::move(from);
  }

  inline MatrixXf& operator=(MatrixXf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixXf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixXf* internal_default_instance() {
    return reinterpret_cast<const MatrixXf*>(
               &_MatrixXf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MatrixXf* other);
  friend void swap(MatrixXf& a, MatrixXf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixXf* New() const final {
    return CreateMaybeMessage<MatrixXf>(NULL);
  }

  MatrixXf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixXf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixXf& from);
  void MergeFrom(const MatrixXf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixXf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // uint32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // uint32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.proto.MatrixXf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_maplab_2dcommon_2feigen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatrixXd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.proto.MatrixXd) */ {
 public:
  MatrixXd();
  virtual ~MatrixXd();

  MatrixXd(const MatrixXd& from);

  inline MatrixXd& operator=(const MatrixXd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatrixXd(MatrixXd&& from) noexcept
    : MatrixXd() {
    *this = ::std::move(from);
  }

  inline MatrixXd& operator=(MatrixXd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixXd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixXd* internal_default_instance() {
    return reinterpret_cast<const MatrixXd*>(
               &_MatrixXd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MatrixXd* other);
  friend void swap(MatrixXd& a, MatrixXd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatrixXd* New() const final {
    return CreateMaybeMessage<MatrixXd>(NULL);
  }

  MatrixXd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatrixXd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatrixXd& from);
  void MergeFrom(const MatrixXd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixXd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // uint32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // uint32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.proto.MatrixXd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_maplab_2dcommon_2feigen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SemiStaticMatrixd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.proto.SemiStaticMatrixd) */ {
 public:
  SemiStaticMatrixd();
  virtual ~SemiStaticMatrixd();

  SemiStaticMatrixd(const SemiStaticMatrixd& from);

  inline SemiStaticMatrixd& operator=(const SemiStaticMatrixd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SemiStaticMatrixd(SemiStaticMatrixd&& from) noexcept
    : SemiStaticMatrixd() {
    *this = ::std::move(from);
  }

  inline SemiStaticMatrixd& operator=(SemiStaticMatrixd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SemiStaticMatrixd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemiStaticMatrixd* internal_default_instance() {
    return reinterpret_cast<const SemiStaticMatrixd*>(
               &_SemiStaticMatrixd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SemiStaticMatrixd* other);
  friend void swap(SemiStaticMatrixd& a, SemiStaticMatrixd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemiStaticMatrixd* New() const final {
    return CreateMaybeMessage<SemiStaticMatrixd>(NULL);
  }

  SemiStaticMatrixd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SemiStaticMatrixd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SemiStaticMatrixd& from);
  void MergeFrom(const SemiStaticMatrixd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemiStaticMatrixd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:common.proto.SemiStaticMatrixd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_maplab_2dcommon_2feigen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SemiStaticMatrixf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.proto.SemiStaticMatrixf) */ {
 public:
  SemiStaticMatrixf();
  virtual ~SemiStaticMatrixf();

  SemiStaticMatrixf(const SemiStaticMatrixf& from);

  inline SemiStaticMatrixf& operator=(const SemiStaticMatrixf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SemiStaticMatrixf(SemiStaticMatrixf&& from) noexcept
    : SemiStaticMatrixf() {
    *this = ::std::move(from);
  }

  inline SemiStaticMatrixf& operator=(SemiStaticMatrixf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SemiStaticMatrixf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemiStaticMatrixf* internal_default_instance() {
    return reinterpret_cast<const SemiStaticMatrixf*>(
               &_SemiStaticMatrixf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SemiStaticMatrixf* other);
  friend void swap(SemiStaticMatrixf& a, SemiStaticMatrixf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemiStaticMatrixf* New() const final {
    return CreateMaybeMessage<SemiStaticMatrixf>(NULL);
  }

  SemiStaticMatrixf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SemiStaticMatrixf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SemiStaticMatrixf& from);
  void MergeFrom(const SemiStaticMatrixf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemiStaticMatrixf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:common.proto.SemiStaticMatrixf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_maplab_2dcommon_2feigen_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatrixXf

// uint32 rows = 1;
inline void MatrixXf::clear_rows() {
  rows_ = 0u;
}
inline ::google::protobuf::uint32 MatrixXf::rows() const {
  // @@protoc_insertion_point(field_get:common.proto.MatrixXf.rows)
  return rows_;
}
inline void MatrixXf::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:common.proto.MatrixXf.rows)
}

// uint32 cols = 2;
inline void MatrixXf::clear_cols() {
  cols_ = 0u;
}
inline ::google::protobuf::uint32 MatrixXf::cols() const {
  // @@protoc_insertion_point(field_get:common.proto.MatrixXf.cols)
  return cols_;
}
inline void MatrixXf::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:common.proto.MatrixXf.cols)
}

// repeated float data = 3;
inline int MatrixXf::data_size() const {
  return data_.size();
}
inline void MatrixXf::clear_data() {
  data_.Clear();
}
inline float MatrixXf::data(int index) const {
  // @@protoc_insertion_point(field_get:common.proto.MatrixXf.data)
  return data_.Get(index);
}
inline void MatrixXf::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.proto.MatrixXf.data)
}
inline void MatrixXf::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:common.proto.MatrixXf.data)
}
inline const ::google::protobuf::RepeatedField< float >&
MatrixXf::data() const {
  // @@protoc_insertion_point(field_list:common.proto.MatrixXf.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
MatrixXf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:common.proto.MatrixXf.data)
  return &data_;
}

// -------------------------------------------------------------------

// MatrixXd

// uint32 rows = 1;
inline void MatrixXd::clear_rows() {
  rows_ = 0u;
}
inline ::google::protobuf::uint32 MatrixXd::rows() const {
  // @@protoc_insertion_point(field_get:common.proto.MatrixXd.rows)
  return rows_;
}
inline void MatrixXd::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:common.proto.MatrixXd.rows)
}

// uint32 cols = 2;
inline void MatrixXd::clear_cols() {
  cols_ = 0u;
}
inline ::google::protobuf::uint32 MatrixXd::cols() const {
  // @@protoc_insertion_point(field_get:common.proto.MatrixXd.cols)
  return cols_;
}
inline void MatrixXd::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:common.proto.MatrixXd.cols)
}

// repeated double data = 3;
inline int MatrixXd::data_size() const {
  return data_.size();
}
inline void MatrixXd::clear_data() {
  data_.Clear();
}
inline double MatrixXd::data(int index) const {
  // @@protoc_insertion_point(field_get:common.proto.MatrixXd.data)
  return data_.Get(index);
}
inline void MatrixXd::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.proto.MatrixXd.data)
}
inline void MatrixXd::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:common.proto.MatrixXd.data)
}
inline const ::google::protobuf::RepeatedField< double >&
MatrixXd::data() const {
  // @@protoc_insertion_point(field_list:common.proto.MatrixXd.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
MatrixXd::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:common.proto.MatrixXd.data)
  return &data_;
}

// -------------------------------------------------------------------

// SemiStaticMatrixd

// repeated double data = 1;
inline int SemiStaticMatrixd::data_size() const {
  return data_.size();
}
inline void SemiStaticMatrixd::clear_data() {
  data_.Clear();
}
inline double SemiStaticMatrixd::data(int index) const {
  // @@protoc_insertion_point(field_get:common.proto.SemiStaticMatrixd.data)
  return data_.Get(index);
}
inline void SemiStaticMatrixd::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.proto.SemiStaticMatrixd.data)
}
inline void SemiStaticMatrixd::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:common.proto.SemiStaticMatrixd.data)
}
inline const ::google::protobuf::RepeatedField< double >&
SemiStaticMatrixd::data() const {
  // @@protoc_insertion_point(field_list:common.proto.SemiStaticMatrixd.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
SemiStaticMatrixd::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:common.proto.SemiStaticMatrixd.data)
  return &data_;
}

// -------------------------------------------------------------------

// SemiStaticMatrixf

// repeated float data = 1;
inline int SemiStaticMatrixf::data_size() const {
  return data_.size();
}
inline void SemiStaticMatrixf::clear_data() {
  data_.Clear();
}
inline float SemiStaticMatrixf::data(int index) const {
  // @@protoc_insertion_point(field_get:common.proto.SemiStaticMatrixf.data)
  return data_.Get(index);
}
inline void SemiStaticMatrixf::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.proto.SemiStaticMatrixf.data)
}
inline void SemiStaticMatrixf::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:common.proto.SemiStaticMatrixf.data)
}
inline const ::google::protobuf::RepeatedField< float >&
SemiStaticMatrixf::data() const {
  // @@protoc_insertion_point(field_list:common.proto.SemiStaticMatrixf.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
SemiStaticMatrixf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:common.proto.SemiStaticMatrixf.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_maplab_2dcommon_2feigen_2eproto
